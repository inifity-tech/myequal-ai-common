name: Auto Version and Release

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  packages: write

jobs:
  check-and-version:
    name: Check Changes and Auto Version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check for code changes
      id: changes
      run: |
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || git diff --name-only $(git rev-list --max-parents=0 HEAD) HEAD)
        
        # Define code file patterns
        CODE_PATTERNS="\.py$|pyproject\.toml$"
        
        # Check if any code files changed
        if echo "$CHANGED_FILES" | grep -E "$CODE_PATTERNS" > /dev/null; then
          echo "code_changed=true" >> $GITHUB_OUTPUT
          echo "Code files changed:"
          echo "$CHANGED_FILES" | grep -E "$CODE_PATTERNS"
        else
          echo "code_changed=false" >> $GITHUB_OUTPUT
          echo "Only non-code files changed"
        fi
    
    - name: Install uv
      if: steps.changes.outputs.code_changed == 'true'
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python
      if: steps.changes.outputs.code_changed == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install toml
      if: steps.changes.outputs.code_changed == 'true'
      run: |
        uv pip install --system toml
    
    - name: Get current version
      if: steps.changes.outputs.code_changed == 'true'
      id: current_version
      run: |
        VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Bump version
      if: steps.changes.outputs.code_changed == 'true'
      id: new_version
      run: |
        # Parse current version
        VERSION="${{ steps.current_version.outputs.version }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        # Check commit message for version bump hints
        COMMIT_MSG=$(git log -1 --pretty=%B)
        
        # Default to patch bump
        if [[ "$COMMIT_MSG" =~ ^feat:|FEATURE: ]]; then
          # Minor version bump for features
          MINOR=$((MINOR + 1))
          PATCH=0
          echo "Detected feature commit - minor version bump"
        elif [[ "$COMMIT_MSG" =~ ^BREAKING:|BREAKING\ CHANGE: ]]; then
          # Major version bump for breaking changes
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
          echo "Detected breaking change - major version bump"
        else
          # Patch version bump for fixes and other changes
          PATCH=$((PATCH + 1))
          echo "Default patch version bump"
        fi
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"
    
    - name: Check if should release
      if: steps.changes.outputs.code_changed == 'true'
      id: should_release
      run: |
        # Check if commit message contains [skip release] or [no release]
        COMMIT_MSG=$(git log -1 --pretty=%B)
        if [[ "$COMMIT_MSG" =~ \[skip\ release\]|\[no\ release\] ]]; then
          echo "should_release=false" >> $GITHUB_OUTPUT
          echo "Skipping release due to commit message flag"
        else
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "Will create release"
        fi
    
    - name: Update version in files
      if: steps.changes.outputs.code_changed == 'true' && steps.should_release.outputs.should_release == 'true'
      run: |
        # Update pyproject.toml
        sed -i "s/version = \"${{ steps.current_version.outputs.version }}\"/version = \"${{ steps.new_version.outputs.new_version }}\"/" pyproject.toml
        
        # Update __init__.py
        sed -i "s/__version__ = \"${{ steps.current_version.outputs.version }}\"/__version__ = \"${{ steps.new_version.outputs.new_version }}\"/" src/myequal_ai_common/__init__.py
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Commit changes
        git add pyproject.toml src/myequal_ai_common/__init__.py
        git commit -m "chore: bump version to ${{ steps.new_version.outputs.new_version }} [skip ci]"
        
        # Create tag
        git tag -a "v${{ steps.new_version.outputs.new_version }}" -m "Release v${{ steps.new_version.outputs.new_version }}"
        
        # Push changes and tag
        git push origin master
        git push origin "v${{ steps.new_version.outputs.new_version }}"
        
        echo "Version bumped to ${{ steps.new_version.outputs.new_version }} and tagged"