name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      version_type:
        description: 'Type of version bump'
        required: false
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        uv pip install --system toml
    
    - name: Get current version
      id: current_version
      run: |
        VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Validate new version
      run: |
        NEW_VERSION="${{ inputs.version }}"
        CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
        
        echo "Current version: $CURRENT_VERSION"
        echo "New version: $NEW_VERSION"
        
        # Basic version format validation
        if ! [[ "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format X.Y.Z (e.g., 1.0.0)"
          exit 1
        fi
        
        # Check if version already exists as a tag
        if git tag -l | grep -q "^v$NEW_VERSION$"; then
          echo "Error: Version v$NEW_VERSION already exists"
          exit 1
        fi
        
        echo "Version validation passed"
    
    - name: Update version in files
      run: |
        NEW_VERSION="${{ inputs.version }}"
        CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
        
        # Update pyproject.toml
        sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
        
        # Update __init__.py if it exists
        if [ -f "src/myequal_ai_common/__init__.py" ]; then
          sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" src/myequal_ai_common/__init__.py
        fi
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Commit changes
        git add pyproject.toml
        if [ -f "src/myequal_ai_common/__init__.py" ]; then
          git add src/myequal_ai_common/__init__.py
        fi
        git commit -m "chore: release version $NEW_VERSION [skip ci]"
        
        # Create tag
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
        # Push changes and tag
        git push origin master
        git push origin "v$NEW_VERSION"
        
        echo "Version updated to $NEW_VERSION and tagged"